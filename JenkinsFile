node {
   def mvnHome
   stage('Preparation') { // for display purposes
      // Get some code from a GitHub repository
      git 'https://github.com/mitesh51/spring-petclinic.git'
      // Get the Maven tool.
      // ** NOTE: This 'apache-maven-3.3.1' Maven tool must be configured
      // **       in the global configuration.           
      mvnHome = tool 'apache-maven-3.3.1'
   }
   stage('SonarQube analysis') {
    // requires SonarQube Scanner 3.0+
    def scannerHome = tool 'SonarQube Scanner 3.0.3';
        withSonarQubeEnv('Sonarqube6.3') {
            bat "${scannerHome}/bin/sonar-scanner -Dsonar.host.url=http://localhost:9000/ -Dsonar.login=1335c62cbfceab5954a5101ab7477cc974f58d56 -Dsonar.projectVersion=1.0 -Dsonar.projectKey=petclinicKey -Dsonar.sources=src"
        }
   }
   stage('Build') {
      // Run the maven build
      if (isUnix()) {
         sh "'${mvnHome}/bin/mvn' -Dmaven.test.failure.ignore clean package"
      } else {
         bat(/"${mvnHome}\bin\mvn" clean package/)
      }
   }
   stage('Deploy') {
      junit '**/target/surefire-reports/TEST-*.xml'
      archive 'target/*.war'
      build 'PetClinic-Deploy'
   }
   stage('Functional Test'){
		git 'https://github.com/mitesh51/petclinic-func.git'
		bat(/"${mvnHome}\bin\mvn" test/)
   }
   stage('Load Test'){
        bat "C:/apache-jmeter-3.0/bin/jmeter.bat -Jjmeter.save.saveservice.output_format=xml -n -t C:/Users/Mitesh/Desktop/PetClinic.jmx -l Test.jtl"
        perfReport errorFailedThreshold: 50, errorUnstableThreshold: 30, ignoreFailedBuilds: true, ignoreUnstableBuilds: true, persistConstraintLog: true, sourceDataFiles: 'Test.jtl'
   }
  
}